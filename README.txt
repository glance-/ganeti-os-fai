This is a simple ganeti-os-interface script to trigger a fai install
--------------------------------------------------------------------

This uses https://ipxe.org/ to trigger https://fai-project.org/
installs.

This is quite inspired by https://github.com/hpc2n/ganeti-os-pxe/ which I wrote
the precursor for about 12 years ago.

This has now evolved into what we're using, where we just use dhcp and let
dhcp server register whatever hostname into dns, and that way we need to
communicate the VM hostname into the fai installer so fai installs the vm
as the right hostname.

As the only os parameter, it has a ADDCLASSES which will be passed to fai
so you can add classes to a vm at ganeti install time.

boot.usb
--------
The boot.usb file is generated by ipxe scripts. First configure serial
console by adding #define SERIAL_CONSOLE in ..

And then build all the relevant binaries:
make bin/ipxe.lkrn bin-i386-efi/ipxe.efi bin-x86_64-efi/ipxe.efi

Then I needed to patch the way we build a disk image to make linux still
be happy with the partition table:

diff --git i/src/util/genfsimg w/src/util/genfsimg
index c1315820..efff8208 100755
--- i/src/util/genfsimg
+++ w/src/util/genfsimg
@@ -267,11 +267,20 @@ if [ -n "${FATIMG}" ] ; then
        FATARGS="-s 63 -h 16 -t ${FATCYLS}"
     fi
     truncate -s "${FATSIZE}K" "${FATIMG}"
-    mformat -v iPXE -i "${FATIMG}" ${FATARGS} ::
-    mcopy -i "${FATIMG}" -s "${FATDIR}"/* ::
-    if [ "${BIOSDIR}" = "${FATDIR}" ] ; then
-       syslinux "${FATIMG}"
-    fi
+    # Inspired by linux/arch/x86/boot/genimage.sh
+    mbr=/usr/lib/SYSLINUX/mbr.bin
+    dd=dd
+    ptype='-T 0xef'    # EFI system partition, no GPT
+    export MTOOLSRC=$(mktemp XXXX.mtools.conf)
+    printf "drive h:\nfile=\"${FATIMG}\" partition=1 mformat_only" > "$MTOOLSRC"
+    FIMAGE=$FATIMG
+    megs=$((FATSIZE / 1024))
+    mpartition -I -c -s 32 -h 64 -t $megs $ptype -b 512 -a h:
+    $dd if="$mbr" of="$FIMAGE" bs=440 count=1 conv=notrunc
+    mformat -v 'iPXE' -s 32 -h 64 -t $megs h:
+    syslinux --offset $((512*512)) "$FIMAGE"
+    mcopy -s "${FATDIR}"/* h:
+    rm -f "$MTOOLSRC"
 fi

And then create a place holder autoexec.ipxe
printf '#!ipxe\necho IT WYRKS\n' > autoexec.ipxe

And then finaly we can build our boot.usb:
./util/genfsimg -p 10240 -o boot.usb -s autoexec.ipxe bin/ipxe.lkrn bin-i386-efi/ipxe.efi bin-x86_64-efi/ipxe.efi
